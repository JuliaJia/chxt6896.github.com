---
layout: post
title: Setuptools(easy_install) 安装利器
category: python
---

setuptools是 Python Enterprise Application Kit（PEAK）的一个副项目，它 是一组Python的 distutilsde工具的增强工具(适用于 Python 2.3.5 以上的版本，64 位平台则适用于 Python 2.4 以上的版本)，可以让程序员更方便的创建和发布 Python 包，特别是那些对其它包具有依赖性的状况。

h2. 简介

经常接触Python的同学可能会注意到，当需要安装第三方python包时，可能会用到<b>easy_install</b>命令。easy_install是由<a href="http://peak.telecommunity.com/">PEAK</a>(Python Enterprise Application Kit)开发的<a href="http://pypi.python.org/pypi/setuptools">setuptools</a>包里带的一个命令，所以使用easy_install实际上是在调用setuptools来完成安装模块的工作。

Perl 用户比较熟悉 CPAN，而 Ruby 用户则比较熟悉 Gems；引导 <b>setuptools</b> 的 <b>ez_setup</b> 工具和随之而生的扩展后的 <b>easy_install</b> 与 “Cheeseshop”（Python Package Index，也称为 “PyPI”）一起工作来实现相同的功能。它可以很方便的让您自动下载，编译，安装和管理Python包。

h2. 特性

相比Python 自带的用于发布 Python 应用程序的模块distutils ，用于发布 Python 应用程序。但 distutils 没有提供定义其它依赖包的功能，setuptools 的真正优点并不在于实现distutils 所能实现的功能——尽管它的确增强了distutils的功能并简化了setup.py 脚本中的内容。setuptools 最大的优势是它在包管理能力方面的增强。它可以使用一种更加透明的方法来查找、下载并安装依赖包；并可以在一个包的多个版本中自由进行切换，这些版本都安装在同一个系统上；也可以声明对某个包的特定版本的需求；还可以只使用一个简单的命令就能更新到某个包的最新版本。给人印象最为深刻的是，即使有些包的开发人员可能还从未考虑过任何 setuptools 兼容性问题，我们依然可以使用这些包。

* 在构建时使用 EasyInstall 工具自动查找、下载、安装、升级所依赖的软件包，EasyInstall 支持通过 HTTP、 FTP、 Subversion 以及 SuroceForge 下载软件包，并能自动扫描 PyPI 上的网页以找到下载链接。(对于熟悉 Perl 的用户， PyPI 是 Python 领域最接近的 CPAN 了。)

* 创建 Python Eggs，一种单文件的可导入的发布格式。

* 在包中的目录中可以包含数据文件，允许代码访问这些数据文件。(Python 2.4 distutils 也支持这个特性，不过 setuptools 能为面向 Python 2.3 的包也提供这样的特性，此外还支持访问压缩包中的数据。)

* 自动包含程序员的源代码树中的所有包，而不需要在独立的 setup.py 中逐个声明。

* 自动在源代码发布中包含所有相关的文件，而无需创建 MANIFEST.in 文件，也不必在源代码树改变后强制生成 MANIFEST。

* 自动为程序员项目中的任意数量的“main”函数生成封装脚本或者 Windows (控制台或者图行用户界面) .exe 文件。(注：这并不是 py2exe 的替代方案；这里生成的 .exe 需要基于已安装的 Python，而 py2exe 则不需要。)

* 透明的 Pyrex(Pyrex 允许程序员编写混合 Python 和 C 数据类型的代码，并编译为 Python 的 C 扩展。)支持，这样程序员的 setup.py 得以列出 .pyx 文件并且即使最终用户没有安装 Pyrex 也能够运行(当然这需要程序员在源代码发布包中包含 Pyrex 生成的 C 代码)。

* 对创建命令行别名的支持，setuptools 可以帮助程序员为发布包创建项目需要的、每个用户或者全局的快捷方式，这通常用于命令行或选项中。

* 上传发布包到 PyPI 的支持，setuptools 可以帮助程序员将源码包或者 eggs 发布到 PyPI 上。

* 可以以“开发模式”发布程序员的项目，这样它可以出现在 sys.path 中，而程序员依然可以直接编辑源代码的工作副本。

* 方便的为 distutils 扩展新功能或者 setup() 参数，并能够发布可供不同的项目重复使用的扩展包，而无需复制代码。

* 创建具有自动发现扩展功能的可扩展的应用程序或框架，只要在项目的安装脚本中简单的声明“入口点(entry points)”即可。

h2. 安装

h3. a.使用 ez_setup.py 安装

这是 setuptools 自豪的一种安装方式，只需要一个大约 8K 作为的脚本ez_setup.py，就能自动为用户安装包括 setuptools 自身在内的许多 Python 包。

使用这种方式，用户只需要下载 <a href="http://peak.telecommunity.com/dist/ez_setup.py">ez_setup.py</a> 并运行，就可以自动下载和安装适合用户当前 Python 版本的适当的 setuptools egg 文件(当然，用户需要 Python 2.3.5 以上的版本，64 位操作系统的用户则需要 Python 2.4 以上的版本)。此外，这段脚本还会将可执行的 easy_install 脚本安装到用户所有的操作系统 Python 可执行脚本正常应该安装的位置(例如，Windows 用户会安装到 Python 安装目录下的 Scripts 目录中)。关于这种安装方法的更详细说明和注意事项，请参考其<a href="http://peak.telecommunity.com/DevCenter/EasyInstall#installing-easy-install">官方说明</a>。简单的安装命令如下：

{% highlight bash linenos %} 
$ wget -q http://peak.telecommunity.com/dist/ez_setup.py
$ python ez_setup.py
{% endhighlight %}

安装完后，最好确保easy_install所在目录已经被加到PATH环境变量里: 
Windows: C:\Python26\Scripts 
Linux: /usr/local/bin

h3. b.使用完整的安装包安装（推荐）

当然，用户也可以使用 setuptools 在 <a href="http://pypi.python.org/pypi/setuptools">Python Cheese Shop</a> 上发布的合适的完整的发布版本来安装。

对于使用 Windows 的用户，下载相应的exe文件安装～

对于使用 Ubuntu的用户，因为许多 Linux 发行版的官方包管理仓库都包含 setuptools 的某个版本。所以只需进行如下操作：

{% highlight bash linenos %}
$ apt-get install python-setuptools
{% endhighlight %}

h2. 使用

使用方法非常简单，在命令行输入“easy_install 参数”即可。

1. 通过模块名称来安装。setuptools会自动搜索<a href="http://pypi.python.org/pypi">PyPI</a> 以查找最新版本的模块。如果找到的话，她会自动下载、编译和安装：例如

{% highlight bash linenos %}
$ easy_install SQLObject
{% endhighlight %}

说明，安装过程可能需要权限，如果是ubuntu的话，可以加上sudo

2. 指定查找页面（"download page"）来使用名称和版本信息来安装或升级一个模块:

{% highlight bash linenos %}
$ easy_install -f http://pythonpaste.org/package_index.html SQLObject
{% endhighlight %}

3. 从指定模块下载地址来下载模块源码并在下载成功之后编译安装

{% highlight bash linenos %}
$ easy_install http://example.com/path/to/MyPackage-1.2.3.tgz
{% endhighlight %}

4. 在本地已经存在的egg文件基础上来安装模块

{% highlight bash linenos %}
$ easy_install /my_downloads/OtherPackage-3.2.1-py2.3.egg
{% endhighlight %}

5. 升级一个已经安装的模块到最新版本，如果在PyPI中这个模块有最新版本。

{% highlight bash linenos %}
$ easy_install --upgrade PyProtocols
{% endhighlight %}

6. 从源码中安装模块（源码已经下载并解压到当前文件夹下）(New in 0.5a9)

{% highlight bash linenos %}
$ easy_install .
{% endhighlight %}

7. 模块卸载

{% highlight bash linenos %}
$ easy_install -m package-name 
{% endhighlight %}

如果想删除通过easy_install安装的软件包，比如说：MySQL-python，可以执行命令：

{% highlight bash linenos %}
$ easy_install -m MySQL-python 
{% endhighlight %}

注：此操作会从easy-install.pth文件里把MySQL-python的相关信息抹去，剩下的egg文件，你可以手动删除。
更多easyinstall的使用方法参考<a href="http://peak.telecommunity.com/DevCenter/EasyInstall">Easyinstall官方文档</a>

注：通过easy_install安装软件，相关安装信息会保存到easy-install.pth文件里，路径类似如下形式：
Windows：C:\Python26\Lib\site-packages\easy-install.pth
Linux：/usr/local/lib/python25/site-packages/easy-install.pth

h2. 相关资源

* <a href="http://pypi.python.org/pypi/setuptools">setuptools模块下载地址</a>

* <a href="http://peak.telecommunity.com/DevCenter/setuptools">setuptools在线文档</a>

* <a href="http://peak.telecommunity.com/DevCenter/EasyInstall">Easy install在线文档</a>

* <a href="http://www.ibm.com/developerworks/cn/linux/l-cppeak3.html">可爱的Python: 使用 setuptools 孵化 Python egg</a>

* <a href="http://peak.telecommunity.com/dist/ez_setup.py">ez_setup.py脚本</a>

以上是python下setuptools的简介 。

h2. egg
 
egg 是一个包含所有包数据的文件包。在理想情况中，egg 是一个使用 zip 压缩的文件，其中包括了所有需要的包文件。但是在某些情况下，setuptools 会决定（或被开关告知）包不应该是 zip 压缩的。在这些情况下，egg 只是一个简单的未曾压缩的子目录，但是里面的内容是相同的。使用单一的版本可以方便地进行转换，并可以节省一点磁盘空间，但是 egg 目录从功能和组织结构上来说都是相同的。一直使用 JAR 文件的 Java 技术的用户会发现 egg 非常熟悉~~