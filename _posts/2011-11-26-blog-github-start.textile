---
layout: post
title: Github 让你拥有属于自己的博客
category: blog
---

h2. <a href="http://en.wikipedia.org/wiki/Git_(software)" target="_blank">git</a>

git 是一个分布式版本控制工具(DVCS)，不需要服务端软件支持(即使在地铁里也可以正常 commit)，Linux 内核开发用的版本控制工具就是它。

常用的 SVN 属于集中式版本控制工具(CVCS)，需要在服务端开启SVN服务，然后客户端 checkout, commit, update。

h2. <a href="https://github.com/" target="_blank">github</a>

github 的标语是："secure source code hosting and collaborative development"。一个基于 git 的类似 google code 的代码仓库，付费版的用户可以创建私有仓库，支持多人开发。很多项目都选择了 github 来保存代码，如 "jQuery/reddit/RoR/CakePHP/Redis" 等等。

h2. <a href="http://pages.github.com/" target="_blank">github pages</a>

blog 是在 pages 的基础上搭建的，创建一个用户的页面很简单，假设你的 Github 用户名为 foo

1. 新建一个仓库(repository)，名称填 "foo.github.com"

2. 按照 guide 完成

{% highlight bash linenos %}
# 在本地新建一个文件夹 foo.github.com
$ mkdir foo.github.com
# 进入文件夹根目录
$ cd foo.github.com
# 初始化
$ git init
$ touch README
$ git add README
# 在根目录下新建一个 index.html 页面，随便写点什么
# 把index.html加入到仓库中
$ git add .
# 提交修改
$ git commit -m 'first commit'
# 添加 github 的分支
$ git remote add origin git@github.com:foo/foo.github.com.git
# 提交到 github 分支
$ git push origin master
{% endhighlight %}

过1分钟左右，浏览 http://foo.github.com，就可以看到刚刚创建的 index.html 文件了。

除了创建用户页面，还可以<a href="http://pages.github.com/" target="_blank">针对每个项目单独创建项目的主页</a>

h2. 创建 blog

到这里其实已经可以写博客了，创建一个 index.html 页面，在里面列出写过的文章，点击标题进去后又是一个手动创建的 html 页。就是太麻烦了，一点都不酷。

github 当然知道这个问题，所以他们创建了<a href="http://github.com/mojombo/jekyll" target="_blank">jekyll模板引擎</a> 。简单来说，就是你可以用<a href="http://www.textism.com/tools/textile/?sample=2" target="_blank">textile</a> 或者<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank">markdown</a>语法来写博客，提交到 github 后，会自动转换成 html。

<a href="http://wiki.github.com/mojombo/jekyll/sites" target="_blank">这里</a>有很多网站/博客，都是基于 github 的 jekyll 模板开发的，如果觉得哪个不错，可以查看 source。

先来看看<a href="http://github.com/mojombo/mojombo.github.com" target="_blank">这个仓库</a>，里面有一些特殊的文件/文件夹：

h4. _config.yml

存储了一些设置，大部分的设置都可以通过命令行指定，但放到配置文件里更方便些

h4. _layouts

_layouts 文件夹存放的是模板文件，文章会被渲染到这些模板里，{{ content }}变量指代的是文章内容

h4. _posts

这里就是真正存放博客文章的地方了，文件命名要遵守这种格式:year-month-day-title.textile 或者 year-month-day-title.markdown

h4. _site

这个文件夹是程序生成的，如果本地没有安装 jekyll 的话，是不会有这个文件夹的，如果想要先本地预览一下，再提交到 github，最好通过 .gitignore 把这个文件夹排除。

h4. index.html

这个文件也有一个<a href="http://wiki.github.com/mojombo/jekyll/yaml-front-matter" target="_blank">yaml前缀</a> ，可以指定使用哪个模板，标题等等，所有根文件夹下的 .html/.htm/.textile/.markdown 都会被解析。

h4. other files/folders

上面没有列出的文件/文件夹都会被 jekyll 放到 _site 文件夹下，如 css/image/script 等等。

h2. jekyll的安装

参考博文<a href="http://chxt6896.github.com/blog/2011/11/30/blog-jekyll-install.html" target="_blank">Jekyll 非你莫属</a> 

h2. 绑定域名

很简单，新建一个 CNAME 文本文件，在里面输入域名，如 "chxt6896.com"，然后在域名提供商里，指定该域名的 CNAME 为 "chxt6896.github.com"，搞定

h2. 添加评论功能

参考博文<a href="http://chxt6896.github.com/blog/2011/12/06/blog-disqus.html" target="_blank">Disqus 我的评论我做主</a>

h2. 参考文章

<a href="http://wiki.github.com/mojombo/jekyll/" target="_blank"> >>>jekyll wiki</a>
<a href="http://github.com/blog/272-github-pages" target="_blank"> >>>github blog</a>
<a href="http://blog.envylabs.com/2009/08/publishing-a-blog-with-github-pages-and-jekyll/" target="_blank"> >>>publishing a blog with github and jekyll</a>

h2. 后记

最后再次感谢 github 提供了这么好的服务，如果对 github 的创业历程感兴趣，可以参考<a href="http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html" target="_blank">这篇文章</a>


h2. PS

文章是转来的，第一篇引导我的文章，很有纪念意义～

后面我会详细讲一下几个关键功能实现，Category，Archive，Highlight，分页，Disqus，欢呼吧，独此一家～～～